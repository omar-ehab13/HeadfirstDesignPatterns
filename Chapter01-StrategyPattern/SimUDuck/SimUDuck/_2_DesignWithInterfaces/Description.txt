We know that not all of the subclasses should have flying or quacking behavior, so inheritance isn't the right answer.

But while having the subclasses implement IFlyable and/or IQuackable solves part of the problem, it completely destroys code reuse for those behaviors, so it just creates a differenct kind of maintenance nightmare.

Whenever you need to modify a behavior, you're often forced to track down and change it in all the different subclasses where that behavior is defined, probably introducing new bugs along the way!

## DESIGN PRINCIPLE
--Encapsulate what varies:
Identify the aspects of your application that vary and separate them from what stays the same.


